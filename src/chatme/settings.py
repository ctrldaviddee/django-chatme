"""
Django settings for chatme project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import redis
from decouple import config

from .installed import INSTALLED_APPS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
REPO_DIR = BASE_DIR.parent
TEMPLATES_DIR = BASE_DIR / "templates"

PROJECT_NAME = config("PROJECT_NAME", cast=str, default="Unset Project Name")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("CHATME_SECRET", cast=str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool, default=False)

# Application definition

INSTALLED_APPS = INSTALLED_APPS

ASGI_APPLICATION = "chatme.asgi.application"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 'redis_sessions.middleware.SessionMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "chatme.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATES_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


if DATABASE_URL := config("DATABASE_URL", cast=str, default=""):
    import dj_database_url

    if DATABASE_URL.startswith("postgres://") or DATABASE_URL.startswith(
        "postgresql://"
    ):
        DATABASES = {
            "default": dj_database_url.config(
                default=DATABASE_URL,
            )
        }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# # Django Channels Layer (using in-memory for now, Redis will be in Phase 2)
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",
#     }
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [config("CHANNEL_LAYERS_HOST", default="")],
            "symmetric_encryption_keys": [config("CHATME_SECRET")],
        },
    }
}

if REDIS_URL_CACHE := config("REDIS_URL_CACHE", default=""):
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL_CACHE,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": config("REDIS_PASSWORD", default=""),
            },
        }
    }

ALLOWED_HOSTS = []

CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
# SESSION_ENGINE = "django.contrib.sessions.backend.cache"
# SESSION_CACHE_ALIAS = "default"
SESSION_ENGINE = "redis_sessions.session"
SESSION_REDIS = {
    "host": config("REDIS_HOST"),
    "port": config("REDIS_PORT"),
    "db": 2,
    "password": config("REDIS_PASSWORD"),
    "prefix": "chatme:session",
    "socket_timeout": 1,
    "retry_on_timeout": False,
}

REDIS_CLIENT = redis.Redis(
    config("REDIS_HOST"),
    config("REDIS_PORT"),
    2,
    config("REDIS_PASSWORD"),
    decode_responses=True,
)

# test redis connection

try:
    REDIS_CLIENT.ping()
    print(f"Successfully connected to Redis for presence on DB {2}")
except redis.exceptions.ConnectionError as e:
    print(
        f"ERROR: Could not connect to Redis for presence on DB 2 at localhost:{config("REDIS_PORT")}. Check Redis server and .env settings. Error: {e}"
    )
    REDIS_CLIENT = None
except Exception as e:  # Catch other potential errors during Redis client init
    print(
        f"ERROR: An unexpected error occurred while initializing Redis client for presence: {e}"
    )
    REDIS_CLIENT = None


# LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = "/accounts/login/"
LOGIN_URL = "/accounts/login/"
